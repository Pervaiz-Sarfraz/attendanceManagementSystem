view.py:
# attendance/views.py
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status
from rest_framework.views import APIView
from .serializers import TeacherSerializer,ClassSerializer,AssignmentSerializer
from rest_framework_simplejwt.tokens import RefreshToken
from .models import Admin, Teacher,Class,Assignment
from rest_framework.permissions import IsAuthenticated
from .permissions import IsAdmin
from django.contrib.auth.hashers import make_password, check_password
from rest_framework import status

class AdminLoginView(APIView):
    def post(self, request):
        email = request.data.get("email")
        password = request.data.get("password")
        
        admin = Admin.objects.filter(email=email).first()
        if not admin:
            return Response({"error": "Invalid email"}, status=status.HTTP_401_UNAUTHORIZED)
        if not admin.check_password(password):
            return Response({"error": "Invalid password"}, status=status.HTTP_401_UNAUTHORIZED)
        if not admin.is_active:
            return Response({"error": "Account is inactive"}, status=status.HTTP_401_UNAUTHORIZED)

        refresh = RefreshToken.for_user(admin)
        return Response({
            "message": "Login successful",
            "admin_id": admin.id,
            "email": admin.email,
            "name": admin.name,
            "role": admin.admin_role,
            "access": str(refresh.access_token),
            "refresh": str(refresh),
        }, status=status.HTTP_200_OK)

class TeacherView(viewsets.ModelViewSet):
    queryset = Teacher.objects.all()
    serializer_class = TeacherSerializer
    permission_classes = [IsAuthenticated, IsAdmin]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

class ClassViewSet(viewsets.ModelViewSet):
    queryset = Class.objects.all()
    serializer_class = ClassSerializer
    permission_classes = [IsAuthenticated, IsAdmin]
    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

class AssignmentView(viewsets.ModelViewSet):
    queryset = Assignment.objects.all()
    serializer_class = AssignmentSerializer
    permission_classes = [IsAuthenticated, IsAdmin]

    def perform_create(self, serializer):
        serializer.save(created_by=self.request.user)

models.py:
from django.contrib.auth.models import AbstractBaseUser, PermissionsMixin, BaseUserManager
from django.db import models


class AdminManager(BaseUserManager):
    def create_user(self, email, password=None, **extra_fields):
        if not email:
            raise ValueError("The Email must be set")
        email = self.normalize_email(email)
        user = self.model(email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_superuser(self, email, password=None, **extra_fields):
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("admin_role", "superadmin")
        return self.create_user(email, password, **extra_fields)

class Admin(AbstractBaseUser, PermissionsMixin):
    email = models.EmailField(unique=True)
    name = models.CharField(max_length=100)
    is_staff = models.BooleanField(default=True)
    is_active = models.BooleanField(default=True)
    admin_role = models.CharField(max_length=100, default="admin")
    created_at = models.DateTimeField(auto_now_add=True)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["name"]

    objects = AdminManager()

    def __str__(self):
        return self.email

class Teacher(models.Model):
    name = models.CharField(max_length=100)
    email = models.EmailField(unique=True)
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(Admin, on_delete=models.CASCADE, related_name="teachers")

    def __str__(self):
        return self.name

class Class(models.Model):
    name = models.CharField(max_length=100)
    code = models.CharField(max_length=10,unique=True)
    schedule = models.CharField(max_length=100)    
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(Admin, on_delete=models.CASCADE, related_name="classes")

    def __str__(self):
        return self.name
    
class Assignment(models.Model):
    teacher = models.ForeignKey(Teacher,    on_delete=models.CASCADE, related_name="assignments")
    class_assign = models.ForeignKey(Class, on_delete=models.CASCADE, related_name="assignments")  
    created_at = models.DateTimeField(auto_now_add=True)
    created_by = models.ForeignKey(Admin, on_delete=models.CASCADE, related_name="assignments")

    class Meta:
        unique_together = ('teacher', 'class_assign')  

    def __str__(self):
        return f"{self.teacher.name} assigned to {self.class_assign.name}"


